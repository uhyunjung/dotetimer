#include <iostream>
#include <limits.h>
#include <memory.h>
#include <queue>

using namespace std;

int dir[4][2] = { {0,-1},{0,1}, {-1,0},{1,0} };
int visited[10][10][10][10];
int ox, oy, ans = -1;

struct balls {
    int rx, ry, bx, by, depth;
};

void mov(string* board, int& x, int& y, int d)
{
    while (true)
    {
        x += dir[d][0];
        y += dir[d][1];
        
        if (board[y][x] == '#')
        {
            x -= dir[d][0];
            y -= dir[d][1];
            return;
        }
        else if (board[y][x] == 'O')
        {
            return;
        }
    }
}

void bfs(string* board, balls info)
{
    queue<balls> q;

    q.push(info);
    while (!q.empty())
    {
        balls temp = q.front();
        q.pop();
        //cout << temp.rx << temp.ry << temp.bx << temp.by << temp.depth << "\n";
        
        // 상하좌우
        for (int i = 0; i < 4; i++)
        {
            int rx = temp.rx;
            int ry = temp.ry;
            int bx = temp.bx;
            int by = temp.by;
            
            int depth = temp.depth + 1;

            if (depth > 10)
            {
                ans = -1;
                return;
            }

            mov(board, rx, ry, i);
            mov(board, bx, by, i);

            if ((ox == bx) && (oy == by)) continue;

            if ((ox == rx) && (oy == ry))
            {
                ans = depth;
                return;
            }

            if ((rx == bx) && (ry == by))
            {
                if (i == 0)
                {
                    if (temp.ry < temp.by)
                    {
                        by++;
                    }
                    else
                    {
                        ry++;
                    }
                }
                else if (i == 1)
                {
                    if (temp.ry < temp.by)
                    {
                        ry--;
                    }
                    else
                    {
                        by--;
                    }
                }
                else if (i == 2)
                {
                    if (temp.rx < temp.bx)
                    {
                        bx++;
                    }
                    else
                    {
                        rx++;
                    }
                }
                else
                {
                    if (temp.rx < temp.bx)
                    {
                        rx--;
                    }
                    else
                    {
                        bx--;
                    }

                }
            }
            
            if (!visited[ry][rx][by][bx])
            {
                visited[ry][rx][by][bx] = 1;
                q.push({ rx, ry, bx, by, depth });
                visited[ry][rx][by][bx] = 0;
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    int N, M;
    cin >> N >> M;

    string* board = new string[N];
    balls info = { 0,0,0,0,0 };

    for (int i = 0; i < N; i++)
    {
        cin >> board[i];
        for (int j = 0; j < M; j++)
        {
            if (board[i][j] == 'R')
            {
                info.rx = j;
                info.ry = i;
            }
            else if (board[i][j] == 'B')
            {
                info.bx = j;
                info.by = i;
            }
            else if (board[i][j] == 'O')
            {
                ox = j;
                oy = i;
            }
        }
    }

    bfs(board, info);

    cout << ans;
}
