#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

struct pos {
	int x, y, size, time, fish; // 위치, 크기, 시간(거리), 먹은 물고기 수
};

int board[22][22];
int visited[22][22];
int n;
int ans;
int dx[4] = { 0, -1, 0, 1 };
int dy[4] = { -1, 0, 1, 0 };
pos shark, close; // 상어와 가장 가까운 물고기 상태 저장
queue<pos> q;

// 먹을 수 있는 물고기들 중 가까운 물고기 저장
void findClosest(pos check) {
	if (close.x == 0) close = check;
	else {
		if (check.time < close.time) { // 가까운 물고기 선택
			close = check;
		}
		else if (check.time == close.time) {
			if (check.y < close.y) close = check; // 위쪽 물고기 선택
			else if (check.y == close.y) {
				if (check.x < close.x) close = check; // 왼쪽 물고기 선택
			}
		}
	}
}

// 거리 가까운 물고기 위치 찾기
void bfs() {
	memset(visited, 0, sizeof(visited)); // visited 초기화 조심
	close = { 0,0,0,0,0 };
	visited[shark.y][shark.x] = 1;
	q.push(shark);

	while (!q.empty())
	{
		int x = q.front().x;
		int y = q.front().y;
		int size = q.front().size;
		int time = q.front().time;
		int fish = q.front().fish;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int newX = x + dx[i];
			int newY = y + dy[i];
			
			if ((newX == 0) || (newY == 0) || (newX == n + 1) || (newY == n + 1)) continue;
			if (visited[newY][newX]) continue;
			if ((board[newY][newX] == 0 ) || (board[newY][newX] == size)) {
				visited[newY][newX] = 1;
				q.push({ newX, newY, size, time + 1, fish });
			}
			else if (board[newY][newX] < size) {
            	// 가장 가까운 물고기 선택
				findClosest({ newX, newY, size, time + 1, fish + 1 });
			}
		}
	}
}

// 물고기 먹기, board, shark 위치 업데이트
void update() {
	board[shark.y][shark.x] = 0;
	board[close.y][close.x] = 9;

	if (close.fish == close.size) { // 물고기 사이즈 증가
		close.size++;
		close.fish = 0;
	}
	shark = close; // 상어 이동
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);

	int temp = 0;
	cin >> n;

	memset(board, 0, sizeof(board));
	
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cin >> temp;
			if (temp == 9) {
				shark = { j, i, 2, 0, 0 };
			}
			board[i][j] = temp;
		}
	}

	while (true) {
		bfs(); // 가장 가까운 물고기 찾기

		if (close.x == 0) { // 먹을 수 있는 물고기 없음
			ans = shark.time;
			break;
		}
		
		update(); // 물고기 먹기, 보드 상태 업데이트
	}
	
	cout << ans;

	return 0;
}
